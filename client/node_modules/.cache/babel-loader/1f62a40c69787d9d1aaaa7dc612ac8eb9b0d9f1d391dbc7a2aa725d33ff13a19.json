{"ast":null,"code":"var _jsxFileName = \"/Users/martykimball/react/serveandpass/src/Graph.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport Session from './Session';\nimport React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LineChart(sessionsList) {\n  _s();\n  sessionsList = sessionsList[\"sessionsList\"];\n  //key = date, value = passing that day\n  let my_data = {};\n  my_data['test'] = {};\n  for (const session of sessionsList) {\n    if (!my_data.hasOwnProperty(session.date)) {\n      my_data[session.date] = {\n        \"total\": Math.round(session.count * session.average),\n        \"count\": session.count\n      };\n    } else {\n      my_data[session.date['total']] += Math.round(session.count * session.average);\n      my_data[session.date['count']] += my_data[session.date['count']] + session.count;\n    }\n  }\n  console.log(my_data);\n  const data = {\n    labels: Object.keys(my_data),\n    datasets: [{\n      label: 'Serve Recieve Rating',\n      data: Object.values(my_data),\n      fill: true,\n      borderColor: 'rgb(75, 192, 192)',\n      tension: 0.1\n    }]\n  };\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    if (canvasRef.current) {\n      const ctx = canvasRef.current.getContext('2d');\n\n      // Instantiate a new chart using 'new Chart()'\n      const lineChart = new Chart(ctx, {\n        type: 'line',\n        data: data\n      });\n\n      // Clean-up function to destroy chart instance on component unmount\n      return () => {\n        lineChart.destroy();\n      };\n    }\n  }, [data]); // Re-run effect if 'data' or 'options' props change\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n_s(LineChart, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = LineChart;\nexport default LineChart;\nvar _c;\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"names":["useState","Session","React","useRef","useEffect","Chart","jsxDEV","_jsxDEV","LineChart","sessionsList","_s","my_data","session","hasOwnProperty","date","Math","round","count","average","console","log","data","labels","Object","keys","datasets","label","values","fill","borderColor","tension","canvasRef","current","ctx","getContext","lineChart","type","destroy","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/martykimball/react/serveandpass/src/Graph.js"],"sourcesContent":["import { useState } from 'react';\nimport Session from './Session';\n\nimport React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js/auto';\n\nfunction LineChart(sessionsList) {\n    sessionsList = sessionsList[\"sessionsList\"]\n    //key = date, value = passing that day\n    let my_data = {}\n    my_data['test'] = {}\n    for (const session of sessionsList) {\n        if (!my_data.hasOwnProperty(session.date)){\n            my_data[session.date] = {\"total\": Math.round(session.count*session.average), \n                                     \"count\": session.count}\n        } \n        else{\n            my_data[session.date['total']] += Math.round(session.count*session.average)\n            my_data[session.date['count']] += my_data[session.date['count']] + session.count\n        }\n    }\n    console.log(my_data)\n\n\n    const data = {\n        labels: Object.keys(my_data),\n        datasets: [\n          {\n            label: 'Serve Recieve Rating',\n            data: Object.values(my_data),\n            fill: true,\n            borderColor: 'rgb(75, 192, 192)',\n            tension: 0.1\n          }\n        ]\n      };\n    const canvasRef = useRef(null);\n\n    useEffect(() => {\n        if (canvasRef.current) {\n        const ctx = canvasRef.current.getContext('2d');\n\n        // Instantiate a new chart using 'new Chart()'\n        const lineChart = new Chart(ctx, {\n            type: 'line',\n            data: data,\n        });\n\n        // Clean-up function to destroy chart instance on component unmount\n        return () => {\n            lineChart.destroy();\n        };\n        }\n    }, [data]); // Re-run effect if 'data' or 'options' props change\n\n    return (\n        <canvas ref={canvasRef}></canvas>\n    );\n}\n\nexport default LineChart;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,OAAO,MAAM,WAAW;AAE/B,OAAOC,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,OAAOC,KAAK,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,SAASA,CAACC,YAAY,EAAE;EAAAC,EAAA;EAC7BD,YAAY,GAAGA,YAAY,CAAC,cAAc,CAAC;EAC3C;EACA,IAAIE,OAAO,GAAG,CAAC,CAAC;EAChBA,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;EACpB,KAAK,MAAMC,OAAO,IAAIH,YAAY,EAAE;IAChC,IAAI,CAACE,OAAO,CAACE,cAAc,CAACD,OAAO,CAACE,IAAI,CAAC,EAAC;MACtCH,OAAO,CAACC,OAAO,CAACE,IAAI,CAAC,GAAG;QAAC,OAAO,EAAEC,IAAI,CAACC,KAAK,CAACJ,OAAO,CAACK,KAAK,GAACL,OAAO,CAACM,OAAO,CAAC;QAClD,OAAO,EAAEN,OAAO,CAACK;MAAK,CAAC;IACpD,CAAC,MACG;MACAN,OAAO,CAACC,OAAO,CAACE,IAAI,CAAC,OAAO,CAAC,CAAC,IAAIC,IAAI,CAACC,KAAK,CAACJ,OAAO,CAACK,KAAK,GAACL,OAAO,CAACM,OAAO,CAAC;MAC3EP,OAAO,CAACC,OAAO,CAACE,IAAI,CAAC,OAAO,CAAC,CAAC,IAAIH,OAAO,CAACC,OAAO,CAACE,IAAI,CAAC,OAAO,CAAC,CAAC,GAAGF,OAAO,CAACK,KAAK;IACpF;EACJ;EACAE,OAAO,CAACC,GAAG,CAACT,OAAO,CAAC;EAGpB,MAAMU,IAAI,GAAG;IACTC,MAAM,EAAEC,MAAM,CAACC,IAAI,CAACb,OAAO,CAAC;IAC5Bc,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,sBAAsB;MAC7BL,IAAI,EAAEE,MAAM,CAACI,MAAM,CAAChB,OAAO,CAAC;MAC5BiB,IAAI,EAAE,IAAI;MACVC,WAAW,EAAE,mBAAmB;MAChCC,OAAO,EAAE;IACX,CAAC;EAEL,CAAC;EACH,MAAMC,SAAS,GAAG5B,MAAM,CAAC,IAAI,CAAC;EAE9BC,SAAS,CAAC,MAAM;IACZ,IAAI2B,SAAS,CAACC,OAAO,EAAE;MACvB,MAAMC,GAAG,GAAGF,SAAS,CAACC,OAAO,CAACE,UAAU,CAAC,IAAI,CAAC;;MAE9C;MACA,MAAMC,SAAS,GAAG,IAAI9B,KAAK,CAAC4B,GAAG,EAAE;QAC7BG,IAAI,EAAE,MAAM;QACZf,IAAI,EAAEA;MACV,CAAC,CAAC;;MAEF;MACA,OAAO,MAAM;QACTc,SAAS,CAACE,OAAO,CAAC,CAAC;MACvB,CAAC;IACD;EACJ,CAAC,EAAE,CAAChB,IAAI,CAAC,CAAC,CAAC,CAAC;;EAEZ,oBACId,OAAA;IAAQ+B,GAAG,EAAEP;EAAU;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAS,CAAC;AAEzC;AAAChC,EAAA,CApDQF,SAAS;AAAAmC,EAAA,GAATnC,SAAS;AAsDlB,eAAeA,SAAS;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}