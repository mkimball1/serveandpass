{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from 'react';\nfunction Session() {\n  _s();\n  const [passes, setPasses] = useState({\n    \"3\": 0,\n    \"2\": 0,\n    \"1\": 0,\n    \"0\": 0\n  });\n  const [count, setCount] = useState(0);\n  const [average, setAverage] = useState(0);\n  function incrementPass(passKey) {\n    console.log('hello');\n    setPasses(currentPasses => {\n      const updatedPasses = {\n        ...currentPasses,\n        [passKey]: currentPasses[passKey] + 1\n      };\n      let total = 0;\n      let new_count = 0;\n      for (const key in updatedPasses) {\n        total += updatedPasses[key] * parseInt(key, 10);\n        new_count += updatedPasses[key];\n      }\n      setAverage(total / new_count);\n      setCount(new_count);\n      return updatedPasses;\n    });\n  }\n  return {\n    passes,\n    count,\n    average,\n    incrementPass\n  };\n  // const [passes, setPasses] = useState({\n  //     \"3\": 0,\n  //     \"2\": 0,\n  //     \"1\": 0,\n  //     \"0\": 0,\n  // })\n\n  // const [count, setCount] = useState(0)\n  // const [average, setAverage] = useState(0)\n  // const [show_legend, updateLegend] = useState(false);\n\n  // function incrementPass(passKey) {\n  //     setPasses((currentPasses) => {\n  //         const updatedPasses = {\n  //             ...currentPasses,\n  //             [passKey]: currentPasses[passKey] + 1,\n  //         };\n  //         let total = 0;\n  //         let new_count = 0;\n  //         for (const key in updatedPasses) {\n  //             total += updatedPasses[key] * parseInt(key, 10);\n  //             new_count += updatedPasses[key];\n  //         }\n  //         setAverage(total / new_count);\n  //         setCount(new_count)\n  //         return updatedPasses;\n  //     });\n  // }\n}\n_s(Session, \"Ae8q2OtoZE2MxIqa23FKu2YqR60=\");\n_c = Session;\nexport default Session;\nvar _c;\n$RefreshReg$(_c, \"Session\");","map":{"version":3,"names":["React","useState","Session","_s","passes","setPasses","count","setCount","average","setAverage","incrementPass","passKey","console","log","currentPasses","updatedPasses","total","new_count","key","parseInt","_c","$RefreshReg$"],"sources":["/Users/martykimball/react/serveandpass/src/Session.js"],"sourcesContent":["import React, { useState } from 'react';\n\n\nfunction Session() {\n    const [passes, setPasses] = useState({\n        \"3\": 0,\n        \"2\": 0,\n        \"1\": 0,\n        \"0\": 0,\n    })\n\n    const [count, setCount] = useState(0)\n    const [average, setAverage] = useState(0)\n  \n    function incrementPass(passKey) {\n        console.log('hello')\n        setPasses((currentPasses) => {\n            const updatedPasses = {\n                ...currentPasses,\n                [passKey]: currentPasses[passKey] + 1,\n            };\n            let total = 0;\n            let new_count = 0;\n            for (const key in updatedPasses) {\n                total += updatedPasses[key] * parseInt(key, 10);\n                new_count += updatedPasses[key];\n            }\n            setAverage(total / new_count);\n            setCount(new_count)\n            return updatedPasses;\n        });\n    }\n    return { passes, count, average, incrementPass };\n    // const [passes, setPasses] = useState({\n    //     \"3\": 0,\n    //     \"2\": 0,\n    //     \"1\": 0,\n    //     \"0\": 0,\n    // })\n\n    // const [count, setCount] = useState(0)\n    // const [average, setAverage] = useState(0)\n    // const [show_legend, updateLegend] = useState(false);\n\n    // function incrementPass(passKey) {\n    //     setPasses((currentPasses) => {\n    //         const updatedPasses = {\n    //             ...currentPasses,\n    //             [passKey]: currentPasses[passKey] + 1,\n    //         };\n    //         let total = 0;\n    //         let new_count = 0;\n    //         for (const key in updatedPasses) {\n    //             total += updatedPasses[key] * parseInt(key, 10);\n    //             new_count += updatedPasses[key];\n    //         }\n    //         setAverage(total / new_count);\n    //         setCount(new_count)\n    //         return updatedPasses;\n    //     });\n    // }\n}\nexport default Session;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAGvC,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGJ,QAAQ,CAAC;IACjC,GAAG,EAAE,CAAC;IACN,GAAG,EAAE,CAAC;IACN,GAAG,EAAE,CAAC;IACN,GAAG,EAAE;EACT,CAAC,CAAC;EAEF,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EAEzC,SAASS,aAAaA,CAACC,OAAO,EAAE;IAC5BC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IACpBR,SAAS,CAAES,aAAa,IAAK;MACzB,MAAMC,aAAa,GAAG;QAClB,GAAGD,aAAa;QAChB,CAACH,OAAO,GAAGG,aAAa,CAACH,OAAO,CAAC,GAAG;MACxC,CAAC;MACD,IAAIK,KAAK,GAAG,CAAC;MACb,IAAIC,SAAS,GAAG,CAAC;MACjB,KAAK,MAAMC,GAAG,IAAIH,aAAa,EAAE;QAC7BC,KAAK,IAAID,aAAa,CAACG,GAAG,CAAC,GAAGC,QAAQ,CAACD,GAAG,EAAE,EAAE,CAAC;QAC/CD,SAAS,IAAIF,aAAa,CAACG,GAAG,CAAC;MACnC;MACAT,UAAU,CAACO,KAAK,GAAGC,SAAS,CAAC;MAC7BV,QAAQ,CAACU,SAAS,CAAC;MACnB,OAAOF,aAAa;IACxB,CAAC,CAAC;EACN;EACA,OAAO;IAAEX,MAAM;IAAEE,KAAK;IAAEE,OAAO;IAAEE;EAAc,CAAC;EAChD;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACJ;AAACP,EAAA,CA1DQD,OAAO;AAAAkB,EAAA,GAAPlB,OAAO;AA2DhB,eAAeA,OAAO;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}