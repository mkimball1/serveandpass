{"ast":null,"code":"// import React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js/auto';\nfunction Graph(curr_date) {\n  this.userData = [];\n}\n_c = Graph;\nexport default Graph;\n\n// function LineChart({ sessionsList }) {\n//     // key = date, value = passing that day\n//     let my_data = {};\n//     for (const session of sessionsList) {\n//         if (!my_data.hasOwnProperty(session.date)) {\n//             my_data[session.date] = {\n//                 \"total\": Math.round(session.count * session.average),\n//                 \"count\": session.count\n//             };\n//         } else {\n//             my_data[session.date]['total'] += Math.round(session.count * session.average);\n//             my_data[session.date]['count'] += session.count;\n//         }\n//     }\n\n//     let values = Object.values(my_data).map(day => day.total / day.count);\n\n//     const data = {\n//         labels: Object.keys(my_data),\n//         datasets: [\n//             {\n//                 label: 'Serve Receive Rating',\n//                 data: values,\n//                 fill: true,\n//                 borderColor: 'rgb(75, 192, 192)',\n//                 tension: 0.1\n//             }\n//         ]\n//     };\n\n//     const options = {\n//         scales: {\n//             y: {\n//                 min: 0,\n//                 max: 3, // Assuming the max rating is 3\n//             }\n//         },\n//         responsive: true,\n//         maintainAspectRatio: false,\n//     };\n\n//     const canvasRef = useRef(null);\n\n//     useEffect(() => {\n//         const ctx = canvasRef.current.getContext('2d');\n//         const lineChart = new Chart(ctx, {\n//             type: 'line',\n//             data: data,\n//             options: options,\n//         });\n\n//         return () => lineChart.destroy(); // Clean-up function to destroy chart instance\n//     }, [data, options]); // Corrected the dependency array\n\n//     return (\n//         <div style={{ position: 'relative', height: '40vh', width: '80vw' }}>\n//             <canvas ref={canvasRef} />\n//         </div>\n//     );\n// }\n\n// export default LineChart;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["Chart","Graph","curr_date","userData","_c","$RefreshReg$"],"sources":["/Users/martykimball/react/serveandpass/src/Graph.js"],"sourcesContent":["// import React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js/auto';\n\nfunction Graph(curr_date) {\n    this.userData = []\n}\nexport default Graph;\n\n// function LineChart({ sessionsList }) {\n//     // key = date, value = passing that day\n//     let my_data = {};\n//     for (const session of sessionsList) {\n//         if (!my_data.hasOwnProperty(session.date)) {\n//             my_data[session.date] = {\n//                 \"total\": Math.round(session.count * session.average),\n//                 \"count\": session.count\n//             };\n//         } else {\n//             my_data[session.date]['total'] += Math.round(session.count * session.average);\n//             my_data[session.date]['count'] += session.count;\n//         }\n//     }\n\n//     let values = Object.values(my_data).map(day => day.total / day.count);\n\n//     const data = {\n//         labels: Object.keys(my_data),\n//         datasets: [\n//             {\n//                 label: 'Serve Receive Rating',\n//                 data: values,\n//                 fill: true,\n//                 borderColor: 'rgb(75, 192, 192)',\n//                 tension: 0.1\n//             }\n//         ]\n//     };\n\n//     const options = {\n//         scales: {\n//             y: {\n//                 min: 0,\n//                 max: 3, // Assuming the max rating is 3\n//             }\n//         },\n//         responsive: true,\n//         maintainAspectRatio: false,\n//     };\n\n//     const canvasRef = useRef(null);\n\n//     useEffect(() => {\n//         const ctx = canvasRef.current.getContext('2d');\n//         const lineChart = new Chart(ctx, {\n//             type: 'line',\n//             data: data,\n//             options: options,\n//         });\n\n//         return () => lineChart.destroy(); // Clean-up function to destroy chart instance\n//     }, [data, options]); // Corrected the dependency array\n\n//     return (\n//         <div style={{ position: 'relative', height: '40vh', width: '80vw' }}>\n//             <canvas ref={canvasRef} />\n//         </div>\n//     );\n// }\n\n// export default LineChart;\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,eAAe;AAEjC,SAASC,KAAKA,CAACC,SAAS,EAAE;EACtB,IAAI,CAACC,QAAQ,GAAG,EAAE;AACtB;AAACC,EAAA,GAFQH,KAAK;AAGd,eAAeA,KAAK;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAG,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}