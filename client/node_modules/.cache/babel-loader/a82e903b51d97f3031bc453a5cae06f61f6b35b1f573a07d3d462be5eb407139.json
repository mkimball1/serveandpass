{"ast":null,"code":"var _jsxFileName = \"/Users/martykimball/react/serveandpass/src/Graph.js\";\n// Import the Line element from the react-chartjs-2 package, which is a React wrapper for Chart.js\nimport { Line } from 'react-chartjs-2';\nimport { Chart as chartjs } from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Graph(my_data) {\n  my_data = my_data['my_data'];\n  let labels = my_data.map(i => i.date);\n  let passdata = my_data.map(i => i.average);\n  const data = {\n    labels: labels,\n    datasets: [{\n      label: 'Session Passing Average',\n      fill: true,\n      backgroundColor: 'rgba(75,192,192,0.4)',\n      borderColor: 'rgba(75,192,192,1)',\n      data: passdata\n    }]\n  };\n  const options = {\n    tooltips: {\n      enabled: true,\n      mode: 'index',\n      intersect: false,\n      callbacks: {\n        // Use the footer callback to display additional info\n        beforeTitle: function (tooltipItem, data) {\n          // You can access the corresponding dataset item using tooltipItem[0].index for example\n          return 'Additional info before title'; // Replace with your additional info\n        },\n\n        afterTitle: function (tooltipItem, data) {\n          return 'Additional info after title'; // Replace with your additional info\n        },\n\n        label: function (context) {\n          // The default content for the tooltip label\n          let label = context.dataset.label || '';\n          if (label) {\n            label += ': ';\n          }\n          if (context.parsed.y !== null) {\n            label += context.parsed.y;\n          }\n          return label;\n        },\n        afterLabel: function (tooltipItem, data) {\n          return 'Additional info after label'; // Replace with your additional info\n        },\n\n        footer: function (tooltipItem, data) {\n          return 'Footer text'; // Replace with your additional info\n        }\n      }\n    },\n\n    scales: {\n      y: {\n        min: 0,\n        max: 3,\n        ticks: {\n          stepSize: 0.05\n        }\n      }\n    },\n    responsive: true,\n    maintainAspectRatio: false\n  };\n\n  // Return the Line element with the data and options as props\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '90vh',\n      width: '90vw'\n    },\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: data,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 12\n  }, this);\n}\n_c = Graph;\nexport default Graph;\n\n// import React, { useRef, useEffect } from 'react';\n\n// function Graph(data) {\n//     const options = {\n//                 scales: {\n//                     y: {\n//                         min: 0,\n//                         max: 3, // Assuming the max rating is 3\n//                     }\n//                 },\n//                 responsive: true,\n//                 maintainAspectRatio: false,\n//             };\n//     return (\n//         <Bar data={data} options={options}/>\n//     );\n// }\n// export default Graph;\n\n// function LineChart({ sessionsList }) {\n//     // key = date, value = passing that day\n//     let my_data = {};\n//     for (const session of sessionsList) {\n//         if (!my_data.hasOwnProperty(session.date)) {\n//             my_data[session.date] = {\n//                 \"total\": Math.round(session.count * session.average),\n//                 \"count\": session.count\n//             };\n//         } else {\n//             my_data[session.date]['total'] += Math.round(session.count * session.average);\n//             my_data[session.date]['count'] += session.count;\n//         }\n//     }\n\n//     let values = Object.values(my_data).map(day => day.total / day.count);\n\n//     const data = {\n//         labels: Object.keys(my_data),\n//         datasets: [\n//             {\n//                 label: 'Serve Receive Rating',\n//                 data: values,\n//                 fill: true,\n//                 borderColor: 'rgb(75, 192, 192)',\n//                 tension: 0.1\n//             }\n//         ]\n//     };\n\n//     const options = {\n//         scales: {\n//             y: {\n//                 min: 0,\n//                 max: 3, // Assuming the max rating is 3\n//             }\n//         },\n//         responsive: true,\n//         maintainAspectRatio: false,\n//     };\n\n//     const canvasRef = useRef(null);\n\n//     useEffect(() => {\n//         const ctx = canvasRef.current.getContext('2d');\n//         const lineChart = new Chart(ctx, {\n//             type: 'line',\n//             data: data,\n//             options: options,\n//         });\n\n//         return () => lineChart.destroy(); // Clean-up function to destroy chart instance\n//     }, [data, options]); // Corrected the dependency array\n\n//     return (\n//         <div style={{ position: 'relative', height: '40vh', width: '80vw' }}>\n//             <canvas ref={canvasRef} />\n//         </div>\n//     );\n// }\n\n// export default LineChart;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["Line","Chart","chartjs","jsxDEV","_jsxDEV","Graph","my_data","labels","map","i","date","passdata","average","data","datasets","label","fill","backgroundColor","borderColor","options","tooltips","enabled","mode","intersect","callbacks","beforeTitle","tooltipItem","afterTitle","context","dataset","parsed","y","afterLabel","footer","scales","min","max","ticks","stepSize","responsive","maintainAspectRatio","style","height","width","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/martykimball/react/serveandpass/src/Graph.js"],"sourcesContent":["// Import the Line element from the react-chartjs-2 package, which is a React wrapper for Chart.js\nimport {Line} from 'react-chartjs-2';\nimport {Chart as chartjs} from 'chart.js/auto';\n\nfunction Graph(my_data) {\n    my_data = my_data['my_data']\n\n    let labels = my_data.map(i => i.date);\n    let passdata = my_data.map(i => i.average);\n\n    const data = {\n        labels: labels,\n        datasets: [\n            {\n                label: 'Session Passing Average',\n                fill: true,\n                backgroundColor: 'rgba(75,192,192,0.4)',\n                borderColor: 'rgba(75,192,192,1)',\n                data: passdata\n            },\n        ],\n    };\n\n    const options = {\n        tooltips: {\n            enabled: true,\n            mode: 'index',\n            intersect: false,\n            callbacks: {\n                // Use the footer callback to display additional info\n                beforeTitle: function(tooltipItem, data) {\n                    // You can access the corresponding dataset item using tooltipItem[0].index for example\n                    return 'Additional info before title'; // Replace with your additional info\n                },\n                afterTitle: function(tooltipItem, data) {\n                    return 'Additional info after title'; // Replace with your additional info\n                },\n                label: function(context) {\n                    // The default content for the tooltip label\n                    let label = context.dataset.label || '';\n    \n                    if (label) {\n                        label += ': ';\n                    }\n                    if (context.parsed.y !== null) {\n                        label += context.parsed.y;\n                    }\n                    return label;\n                },\n                afterLabel: function(tooltipItem, data) {\n                    return 'Additional info after label'; // Replace with your additional info\n                },\n                footer: function(tooltipItem, data) {\n                    return 'Footer text'; // Replace with your additional info\n                },\n            }\n        },\n        scales: {\n            y: {\n                min: 0,\n                max: 3,\n                ticks: {\n                    stepSize: 0.05\n                }\n            }\n        },\n        responsive: true,\n        maintainAspectRatio: false,\n        \n    };\n\n    // Return the Line element with the data and options as props\n    return <div style={{ height: '90vh', width: '90vw' }}>\n        <Line data={data} options={options} />\n    </div>;\n}\n\nexport default Graph;\n\n// import React, { useRef, useEffect } from 'react';\n\n\n// function Graph(data) {\n//     const options = {\n//                 scales: {\n//                     y: {\n//                         min: 0,\n//                         max: 3, // Assuming the max rating is 3\n//                     }\n//                 },\n//                 responsive: true,\n//                 maintainAspectRatio: false,\n//             };\n//     return (\n//         <Bar data={data} options={options}/>\n//     );\n// }\n// export default Graph;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// function LineChart({ sessionsList }) {\n//     // key = date, value = passing that day\n//     let my_data = {};\n//     for (const session of sessionsList) {\n//         if (!my_data.hasOwnProperty(session.date)) {\n//             my_data[session.date] = {\n//                 \"total\": Math.round(session.count * session.average),\n//                 \"count\": session.count\n//             };\n//         } else {\n//             my_data[session.date]['total'] += Math.round(session.count * session.average);\n//             my_data[session.date]['count'] += session.count;\n//         }\n//     }\n\n//     let values = Object.values(my_data).map(day => day.total / day.count);\n\n//     const data = {\n//         labels: Object.keys(my_data),\n//         datasets: [\n//             {\n//                 label: 'Serve Receive Rating',\n//                 data: values,\n//                 fill: true,\n//                 borderColor: 'rgb(75, 192, 192)',\n//                 tension: 0.1\n//             }\n//         ]\n//     };\n\n//     const options = {\n//         scales: {\n//             y: {\n//                 min: 0,\n//                 max: 3, // Assuming the max rating is 3\n//             }\n//         },\n//         responsive: true,\n//         maintainAspectRatio: false,\n//     };\n\n//     const canvasRef = useRef(null);\n\n//     useEffect(() => {\n//         const ctx = canvasRef.current.getContext('2d');\n//         const lineChart = new Chart(ctx, {\n//             type: 'line',\n//             data: data,\n//             options: options,\n//         });\n\n//         return () => lineChart.destroy(); // Clean-up function to destroy chart instance\n//     }, [data, options]); // Corrected the dependency array\n\n//     return (\n//         <div style={{ position: 'relative', height: '40vh', width: '80vw' }}>\n//             <canvas ref={canvasRef} />\n//         </div>\n//     );\n// }\n\n// export default LineChart;\n"],"mappings":";AAAA;AACA,SAAQA,IAAI,QAAO,iBAAiB;AACpC,SAAQC,KAAK,IAAIC,OAAO,QAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,KAAKA,CAACC,OAAO,EAAE;EACpBA,OAAO,GAAGA,OAAO,CAAC,SAAS,CAAC;EAE5B,IAAIC,MAAM,GAAGD,OAAO,CAACE,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC;EACrC,IAAIC,QAAQ,GAAGL,OAAO,CAACE,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACG,OAAO,CAAC;EAE1C,MAAMC,IAAI,GAAG;IACTN,MAAM,EAAEA,MAAM;IACdO,QAAQ,EAAE,CACN;MACIC,KAAK,EAAE,yBAAyB;MAChCC,IAAI,EAAE,IAAI;MACVC,eAAe,EAAE,sBAAsB;MACvCC,WAAW,EAAE,oBAAoB;MACjCL,IAAI,EAAEF;IACV,CAAC;EAET,CAAC;EAED,MAAMQ,OAAO,GAAG;IACZC,QAAQ,EAAE;MACNC,OAAO,EAAE,IAAI;MACbC,IAAI,EAAE,OAAO;MACbC,SAAS,EAAE,KAAK;MAChBC,SAAS,EAAE;QACP;QACAC,WAAW,EAAE,SAAAA,CAASC,WAAW,EAAEb,IAAI,EAAE;UACrC;UACA,OAAO,8BAA8B,CAAC,CAAC;QAC3C,CAAC;;QACDc,UAAU,EAAE,SAAAA,CAASD,WAAW,EAAEb,IAAI,EAAE;UACpC,OAAO,6BAA6B,CAAC,CAAC;QAC1C,CAAC;;QACDE,KAAK,EAAE,SAAAA,CAASa,OAAO,EAAE;UACrB;UACA,IAAIb,KAAK,GAAGa,OAAO,CAACC,OAAO,CAACd,KAAK,IAAI,EAAE;UAEvC,IAAIA,KAAK,EAAE;YACPA,KAAK,IAAI,IAAI;UACjB;UACA,IAAIa,OAAO,CAACE,MAAM,CAACC,CAAC,KAAK,IAAI,EAAE;YAC3BhB,KAAK,IAAIa,OAAO,CAACE,MAAM,CAACC,CAAC;UAC7B;UACA,OAAOhB,KAAK;QAChB,CAAC;QACDiB,UAAU,EAAE,SAAAA,CAASN,WAAW,EAAEb,IAAI,EAAE;UACpC,OAAO,6BAA6B,CAAC,CAAC;QAC1C,CAAC;;QACDoB,MAAM,EAAE,SAAAA,CAASP,WAAW,EAAEb,IAAI,EAAE;UAChC,OAAO,aAAa,CAAC,CAAC;QAC1B;MACJ;IACJ,CAAC;;IACDqB,MAAM,EAAE;MACJH,CAAC,EAAE;QACCI,GAAG,EAAE,CAAC;QACNC,GAAG,EAAE,CAAC;QACNC,KAAK,EAAE;UACHC,QAAQ,EAAE;QACd;MACJ;IACJ,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,mBAAmB,EAAE;EAEzB,CAAC;;EAED;EACA,oBAAOpC,OAAA;IAAKqC,KAAK,EAAE;MAAEC,MAAM,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAO,CAAE;IAAAC,QAAA,eACjDxC,OAAA,CAACJ,IAAI;MAACa,IAAI,EAAEA,IAAK;MAACM,OAAO,EAAEA;IAAQ;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AACV;AAACC,EAAA,GAvEQ5C,KAAK;AAyEd,eAAeA,KAAK;;AAEpB;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}