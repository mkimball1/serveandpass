{"ast":null,"code":"var _jsxFileName = \"/Users/martykimball/react/serveandpass/src/Graph.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport Session from './Session';\nimport React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LineChart(sessionsList) {\n  _s();\n  console.log(Object.keys(sessionsList));\n  //key = date, value = passing that day\n  let my_data = {};\n  for (const session in sessionsList) {\n    my_data[session.date] = 1;\n    // if (!my_data.hasOwnProperty(session.date)){\n    //     my_data[session.date] = {total: new Int16Array(session.count*session.average), count: session.count}\n    // } else{\n    //     my_data[session.date['total']] += new Int16Array(session.count*session.average)\n    //     my_data[session.date['count']] += my_data[session.date['count']] + session.count\n    // }\n  }\n\n  console.log(my_data);\n  const data = {\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n    datasets: [{\n      label: 'Serve Recieve Rating',\n      data: [65, 59, 80, 81, 56, 55, 40],\n      fill: true,\n      borderColor: 'rgb(75, 192, 192)',\n      tension: 0.1\n    }]\n  };\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    if (canvasRef.current) {\n      const ctx = canvasRef.current.getContext('2d');\n\n      // Instantiate a new chart using 'new Chart()'\n      const lineChart = new Chart(ctx, {\n        type: 'line',\n        data: data\n      });\n\n      // Clean-up function to destroy chart instance on component unmount\n      return () => {\n        lineChart.destroy();\n      };\n    }\n  }, [data]); // Re-run effect if 'data' or 'options' props change\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n_s(LineChart, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = LineChart;\nexport default LineChart;\nvar _c;\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"names":["useState","Session","React","useRef","useEffect","Chart","jsxDEV","_jsxDEV","LineChart","sessionsList","_s","console","log","Object","keys","my_data","session","date","data","labels","datasets","label","fill","borderColor","tension","canvasRef","current","ctx","getContext","lineChart","type","destroy","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/martykimball/react/serveandpass/src/Graph.js"],"sourcesContent":["import { useState } from 'react';\nimport Session from './Session';\n\nimport React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js/auto';\n\nfunction LineChart(sessionsList) {\n    console.log(Object.keys(sessionsList))\n    //key = date, value = passing that day\n    let my_data = {}\n    for (const session in sessionsList) {\n        my_data[session.date] = 1;\n        // if (!my_data.hasOwnProperty(session.date)){\n        //     my_data[session.date] = {total: new Int16Array(session.count*session.average), count: session.count}\n        // } else{\n        //     my_data[session.date['total']] += new Int16Array(session.count*session.average)\n        //     my_data[session.date['count']] += my_data[session.date['count']] + session.count\n        // }\n    }\n    console.log(my_data)\n\n\n    const data = {\n        labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n        datasets: [\n          {\n            label: 'Serve Recieve Rating',\n            data: [65, 59, 80, 81, 56, 55, 40],\n            fill: true,\n            borderColor: 'rgb(75, 192, 192)',\n            tension: 0.1\n          }\n        ]\n      };\n    const canvasRef = useRef(null);\n\n    useEffect(() => {\n        if (canvasRef.current) {\n        const ctx = canvasRef.current.getContext('2d');\n\n        // Instantiate a new chart using 'new Chart()'\n        const lineChart = new Chart(ctx, {\n            type: 'line',\n            data: data,\n        });\n\n        // Clean-up function to destroy chart instance on component unmount\n        return () => {\n            lineChart.destroy();\n        };\n        }\n    }, [data]); // Re-run effect if 'data' or 'options' props change\n\n    return (\n        <canvas ref={canvasRef}></canvas>\n    );\n}\n\nexport default LineChart;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,OAAO,MAAM,WAAW;AAE/B,OAAOC,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,OAAOC,KAAK,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,SAASA,CAACC,YAAY,EAAE;EAAAC,EAAA;EAC7BC,OAAO,CAACC,GAAG,CAACC,MAAM,CAACC,IAAI,CAACL,YAAY,CAAC,CAAC;EACtC;EACA,IAAIM,OAAO,GAAG,CAAC,CAAC;EAChB,KAAK,MAAMC,OAAO,IAAIP,YAAY,EAAE;IAChCM,OAAO,CAACC,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC;IACzB;IACA;IACA;IACA;IACA;IACA;EACJ;;EACAN,OAAO,CAACC,GAAG,CAACG,OAAO,CAAC;EAGpB,MAAMG,IAAI,GAAG;IACTC,MAAM,EAAE,CAAC,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC;IACxEC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,sBAAsB;MAC7BH,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;MAClCI,IAAI,EAAE,IAAI;MACVC,WAAW,EAAE,mBAAmB;MAChCC,OAAO,EAAE;IACX,CAAC;EAEL,CAAC;EACH,MAAMC,SAAS,GAAGtB,MAAM,CAAC,IAAI,CAAC;EAE9BC,SAAS,CAAC,MAAM;IACZ,IAAIqB,SAAS,CAACC,OAAO,EAAE;MACvB,MAAMC,GAAG,GAAGF,SAAS,CAACC,OAAO,CAACE,UAAU,CAAC,IAAI,CAAC;;MAE9C;MACA,MAAMC,SAAS,GAAG,IAAIxB,KAAK,CAACsB,GAAG,EAAE;QAC7BG,IAAI,EAAE,MAAM;QACZZ,IAAI,EAAEA;MACV,CAAC,CAAC;;MAEF;MACA,OAAO,MAAM;QACTW,SAAS,CAACE,OAAO,CAAC,CAAC;MACvB,CAAC;IACD;EACJ,CAAC,EAAE,CAACb,IAAI,CAAC,CAAC,CAAC,CAAC;;EAEZ,oBACIX,OAAA;IAAQyB,GAAG,EAAEP;EAAU;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAS,CAAC;AAEzC;AAAC1B,EAAA,CAlDQF,SAAS;AAAA6B,EAAA,GAAT7B,SAAS;AAoDlB,eAAeA,SAAS;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}