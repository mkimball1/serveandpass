{"ast":null,"code":"var _jsxFileName = \"/Users/martykimball/react/serveandpass/src/Graph.js\";\n// Import the Line element from the react-chartjs-2 package, which is a React wrapper for Chart.js\nimport { Line } from 'react-chartjs-2';\nimport { Chart as chartjs } from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Graph(my_data) {\n  my_data = my_data['my_data'];\n  console.log(my_data);\n  let test = [];\n  for (let i of my_data) {\n    test.push(i.date);\n  }\n  let test2 = [];\n  for (let i of my_data) {\n    test.push(i.average);\n  }\n  console.log(test);\n  console.log(test2);\n  const data = {\n    // dates\n    // labels: ['1', '2', '3','4'],\n    labels: test,\n    datasets: [{\n      label: 'Passing Averages By Day',\n      fill: true,\n      backgroundColor: 'rgba(75,192,192,0.4)',\n      borderColor: 'rgba(75,192,192,1)',\n      // average by day\n      // data: [2.5, 1.2, 2, 1],\n      data: test2\n    }]\n  };\n  const options = {\n    scales: {\n      y: {\n        min: 0,\n        max: 3,\n        ticks: {\n          stepSize: 0.05\n        }\n      }\n    },\n    responsive: true,\n    maintainAspectRatio: false\n  };\n\n  // Return the Line element with the data and options as props\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '90vh',\n      width: '90vw'\n    },\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: data,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 12\n  }, this);\n}\n_c = Graph;\nexport default Graph;\n\n// import React, { useRef, useEffect } from 'react';\n\n// function Graph(data) {\n//     const options = {\n//                 scales: {\n//                     y: {\n//                         min: 0,\n//                         max: 3, // Assuming the max rating is 3\n//                     }\n//                 },\n//                 responsive: true,\n//                 maintainAspectRatio: false,\n//             };\n//     return (\n//         <Bar data={data} options={options}/>\n//     );\n// }\n// export default Graph;\n\n// function LineChart({ sessionsList }) {\n//     // key = date, value = passing that day\n//     let my_data = {};\n//     for (const session of sessionsList) {\n//         if (!my_data.hasOwnProperty(session.date)) {\n//             my_data[session.date] = {\n//                 \"total\": Math.round(session.count * session.average),\n//                 \"count\": session.count\n//             };\n//         } else {\n//             my_data[session.date]['total'] += Math.round(session.count * session.average);\n//             my_data[session.date]['count'] += session.count;\n//         }\n//     }\n\n//     let values = Object.values(my_data).map(day => day.total / day.count);\n\n//     const data = {\n//         labels: Object.keys(my_data),\n//         datasets: [\n//             {\n//                 label: 'Serve Receive Rating',\n//                 data: values,\n//                 fill: true,\n//                 borderColor: 'rgb(75, 192, 192)',\n//                 tension: 0.1\n//             }\n//         ]\n//     };\n\n//     const options = {\n//         scales: {\n//             y: {\n//                 min: 0,\n//                 max: 3, // Assuming the max rating is 3\n//             }\n//         },\n//         responsive: true,\n//         maintainAspectRatio: false,\n//     };\n\n//     const canvasRef = useRef(null);\n\n//     useEffect(() => {\n//         const ctx = canvasRef.current.getContext('2d');\n//         const lineChart = new Chart(ctx, {\n//             type: 'line',\n//             data: data,\n//             options: options,\n//         });\n\n//         return () => lineChart.destroy(); // Clean-up function to destroy chart instance\n//     }, [data, options]); // Corrected the dependency array\n\n//     return (\n//         <div style={{ position: 'relative', height: '40vh', width: '80vw' }}>\n//             <canvas ref={canvasRef} />\n//         </div>\n//     );\n// }\n\n// export default LineChart;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["Line","Chart","chartjs","jsxDEV","_jsxDEV","Graph","my_data","console","log","test","i","push","date","test2","average","data","labels","datasets","label","fill","backgroundColor","borderColor","options","scales","y","min","max","ticks","stepSize","responsive","maintainAspectRatio","style","height","width","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/martykimball/react/serveandpass/src/Graph.js"],"sourcesContent":["// Import the Line element from the react-chartjs-2 package, which is a React wrapper for Chart.js\nimport {Line} from 'react-chartjs-2';\nimport {Chart as chartjs} from 'chart.js/auto';\n\nfunction Graph(my_data) {\n    my_data = my_data['my_data']\n    console.log(my_data)\n    let test = []\n    for (let i of my_data){\n        test.push(i.date)\n    }\n    let test2 = []\n    for (let i of my_data){\n        test.push(i.average)\n    }\n    console.log(test)\n    console.log(test2)\n    const data = {\n        // dates\n        // labels: ['1', '2', '3','4'],\n        labels: test,\n        datasets: [\n            {\n                label: 'Passing Averages By Day',\n                fill: true,\n                backgroundColor: 'rgba(75,192,192,0.4)',\n                borderColor: 'rgba(75,192,192,1)',\n                // average by day\n                // data: [2.5, 1.2, 2, 1],\n                data: test2\n            },\n        ],\n    };\n\n    const options = {\n        scales: {\n            y: {\n                min: 0,\n                max: 3,\n                ticks: {\n                    stepSize: 0.05\n                }\n            }\n        },\n        responsive: true,\n        maintainAspectRatio: false,\n        \n    };\n\n    // Return the Line element with the data and options as props\n    return <div style={{ height: '90vh', width: '90vw' }}>\n        <Line data={data} options={options} />\n    </div>;\n}\n\nexport default Graph;\n\n// import React, { useRef, useEffect } from 'react';\n\n\n// function Graph(data) {\n//     const options = {\n//                 scales: {\n//                     y: {\n//                         min: 0,\n//                         max: 3, // Assuming the max rating is 3\n//                     }\n//                 },\n//                 responsive: true,\n//                 maintainAspectRatio: false,\n//             };\n//     return (\n//         <Bar data={data} options={options}/>\n//     );\n// }\n// export default Graph;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// function LineChart({ sessionsList }) {\n//     // key = date, value = passing that day\n//     let my_data = {};\n//     for (const session of sessionsList) {\n//         if (!my_data.hasOwnProperty(session.date)) {\n//             my_data[session.date] = {\n//                 \"total\": Math.round(session.count * session.average),\n//                 \"count\": session.count\n//             };\n//         } else {\n//             my_data[session.date]['total'] += Math.round(session.count * session.average);\n//             my_data[session.date]['count'] += session.count;\n//         }\n//     }\n\n//     let values = Object.values(my_data).map(day => day.total / day.count);\n\n//     const data = {\n//         labels: Object.keys(my_data),\n//         datasets: [\n//             {\n//                 label: 'Serve Receive Rating',\n//                 data: values,\n//                 fill: true,\n//                 borderColor: 'rgb(75, 192, 192)',\n//                 tension: 0.1\n//             }\n//         ]\n//     };\n\n//     const options = {\n//         scales: {\n//             y: {\n//                 min: 0,\n//                 max: 3, // Assuming the max rating is 3\n//             }\n//         },\n//         responsive: true,\n//         maintainAspectRatio: false,\n//     };\n\n//     const canvasRef = useRef(null);\n\n//     useEffect(() => {\n//         const ctx = canvasRef.current.getContext('2d');\n//         const lineChart = new Chart(ctx, {\n//             type: 'line',\n//             data: data,\n//             options: options,\n//         });\n\n//         return () => lineChart.destroy(); // Clean-up function to destroy chart instance\n//     }, [data, options]); // Corrected the dependency array\n\n//     return (\n//         <div style={{ position: 'relative', height: '40vh', width: '80vw' }}>\n//             <canvas ref={canvasRef} />\n//         </div>\n//     );\n// }\n\n// export default LineChart;\n"],"mappings":";AAAA;AACA,SAAQA,IAAI,QAAO,iBAAiB;AACpC,SAAQC,KAAK,IAAIC,OAAO,QAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,KAAKA,CAACC,OAAO,EAAE;EACpBA,OAAO,GAAGA,OAAO,CAAC,SAAS,CAAC;EAC5BC,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC;EACpB,IAAIG,IAAI,GAAG,EAAE;EACb,KAAK,IAAIC,CAAC,IAAIJ,OAAO,EAAC;IAClBG,IAAI,CAACE,IAAI,CAACD,CAAC,CAACE,IAAI,CAAC;EACrB;EACA,IAAIC,KAAK,GAAG,EAAE;EACd,KAAK,IAAIH,CAAC,IAAIJ,OAAO,EAAC;IAClBG,IAAI,CAACE,IAAI,CAACD,CAAC,CAACI,OAAO,CAAC;EACxB;EACAP,OAAO,CAACC,GAAG,CAACC,IAAI,CAAC;EACjBF,OAAO,CAACC,GAAG,CAACK,KAAK,CAAC;EAClB,MAAME,IAAI,GAAG;IACT;IACA;IACAC,MAAM,EAAEP,IAAI;IACZQ,QAAQ,EAAE,CACN;MACIC,KAAK,EAAE,yBAAyB;MAChCC,IAAI,EAAE,IAAI;MACVC,eAAe,EAAE,sBAAsB;MACvCC,WAAW,EAAE,oBAAoB;MACjC;MACA;MACAN,IAAI,EAAEF;IACV,CAAC;EAET,CAAC;EAED,MAAMS,OAAO,GAAG;IACZC,MAAM,EAAE;MACJC,CAAC,EAAE;QACCC,GAAG,EAAE,CAAC;QACNC,GAAG,EAAE,CAAC;QACNC,KAAK,EAAE;UACHC,QAAQ,EAAE;QACd;MACJ;IACJ,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,mBAAmB,EAAE;EAEzB,CAAC;;EAED;EACA,oBAAO1B,OAAA;IAAK2B,KAAK,EAAE;MAAEC,MAAM,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAO,CAAE;IAAAC,QAAA,eACjD9B,OAAA,CAACJ,IAAI;MAACe,IAAI,EAAEA,IAAK;MAACO,OAAO,EAAEA;IAAQ;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AACV;AAACC,EAAA,GAjDQlC,KAAK;AAmDd,eAAeA,KAAK;;AAEpB;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}