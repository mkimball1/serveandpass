{"ast":null,"code":"var _jsxFileName = \"/Users/martykimball/react/serveandpass/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [passes, setPasses] = useState({\n    \"3\": 0,\n    \"2\": 0,\n    \"1\": 0,\n    \"0\": 0\n  });\n  const [total, setTotal] = useState(0);\n  const [count, setCount] = useState(0);\n  const [average, setAverage] = useState(0);\n  function incrementPass(passKey) {\n    setPlayer(currentPlayer => {\n      const newPasses = {\n        ...currentPlayer.passes,\n        [passKey]: currentPlayer.passes[passKey] + 1\n      };\n      currentPlayer.setPasses(newPasses); // Assuming setPasses is a method to update passes in your Player object\n\n      // Update total and count based on the new passes\n      let newTotal = total;\n      let newCount = count;\n      for (const key in newPasses) {\n        newTotal += newPasses[key] * parseInt(key, 10);\n        newCount += newPasses[key];\n      }\n\n      // These state updates do not make sense in this context as they would cause re-renders\n      // and the loop above calculates cumulative sums incorrectly. It should sum only the delta.\n      // setTotal(newTotal);\n      // setCount(newCount);\n\n      return {\n        ...currentPlayer,\n        passes: newPasses\n      }; // Return new player object with updated passes\n    });\n  }\n\n  // Effect to update average whenever total or count changes\n  useEffect(() => {\n    if (count > 0) {\n      // Prevent division by zero\n      const newAverage = total / count;\n      player.setAverage(newAverage); // Assuming setAverage is a method to update average in your Player object\n    }\n  }, [total, count]); // Dependencies on total and count\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button_container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => incrementPass('3'),\n        children: \" 3 \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => incrementPass('2'),\n        children: \" 2 \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => incrementPass('1'),\n        children: \" 1 \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => incrementPass('0'),\n        children: \" 0 \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stats\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" 3: \", passes[\"3\"]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" 2: \", passes[\"2\"]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" 1: \", passes[\"1\"]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" 0: \", passes[\"0\"]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" Average: \", average.toFixed(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"oCHMp2YifVxb3ta484xTHOvTndA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","passes","setPasses","total","setTotal","count","setCount","average","setAverage","incrementPass","passKey","setPlayer","currentPlayer","newPasses","newTotal","newCount","key","parseInt","useEffect","newAverage","player","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","_c","$RefreshReg$"],"sources":["/Users/martykimball/react/serveandpass/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\n\nfunction App() {\n  const [passes, setPasses] = useState({\n    \"3\": 0,\n    \"2\": 0,\n    \"1\": 0,\n    \"0\": 0,\n  })\n\n  const [total, setTotal] = useState(0)\n  const [count, setCount] = useState(0)\n  const [average, setAverage] = useState(0)\n\n  function incrementPass(passKey) {\n    setPlayer((currentPlayer) => {\n      const newPasses = { ...currentPlayer.passes, [passKey]: currentPlayer.passes[passKey] + 1 };\n      currentPlayer.setPasses(newPasses); // Assuming setPasses is a method to update passes in your Player object\n      \n      // Update total and count based on the new passes\n      let newTotal = total;\n      let newCount = count;\n      for (const key in newPasses) {\n        newTotal += newPasses[key] * parseInt(key, 10);\n        newCount += newPasses[key];\n      }\n      \n      // These state updates do not make sense in this context as they would cause re-renders\n      // and the loop above calculates cumulative sums incorrectly. It should sum only the delta.\n      // setTotal(newTotal);\n      // setCount(newCount);\n\n      return { ...currentPlayer, passes: newPasses }; // Return new player object with updated passes\n    });\n  }\n\n  // Effect to update average whenever total or count changes\n  useEffect(() => {\n    if (count > 0) { // Prevent division by zero\n      const newAverage = total / count;\n      player.setAverage(newAverage); // Assuming setAverage is a method to update average in your Player object\n    }\n  }, [total, count]); // Dependencies on total and count\n\n  \n\n  \n\n  return (\n    <div className=\"container\">  \n      <div className=\"button_container\">\n        <button onClick={() => incrementPass('3')}> 3 </button>\n        <button onClick={() => incrementPass('2')}> 2 </button>\n        <button onClick={() => incrementPass('1')}> 1 </button>\n        <button onClick={() => incrementPass('0')}> 0 </button>\n      </div>\n      <div className=\"stats\">\n        {/* Ensure you are accessing the passes in a way that works with your state management */}\n        <p> 3: {passes[\"3\"]}</p>\n        <p> 2: {passes[\"2\"]}</p>\n        <p> 1: {passes[\"1\"]}</p>\n        <p> 0: {passes[\"0\"]}</p>\n        <p> Average: {average.toFixed(2)}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC;IACnC,GAAG,EAAE,CAAC;IACN,GAAG,EAAE,CAAC;IACN,GAAG,EAAE,CAAC;IACN,GAAG,EAAE;EACP,CAAC,CAAC;EAEF,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EAEzC,SAASa,aAAaA,CAACC,OAAO,EAAE;IAC9BC,SAAS,CAAEC,aAAa,IAAK;MAC3B,MAAMC,SAAS,GAAG;QAAE,GAAGD,aAAa,CAACX,MAAM;QAAE,CAACS,OAAO,GAAGE,aAAa,CAACX,MAAM,CAACS,OAAO,CAAC,GAAG;MAAE,CAAC;MAC3FE,aAAa,CAACV,SAAS,CAACW,SAAS,CAAC,CAAC,CAAC;;MAEpC;MACA,IAAIC,QAAQ,GAAGX,KAAK;MACpB,IAAIY,QAAQ,GAAGV,KAAK;MACpB,KAAK,MAAMW,GAAG,IAAIH,SAAS,EAAE;QAC3BC,QAAQ,IAAID,SAAS,CAACG,GAAG,CAAC,GAAGC,QAAQ,CAACD,GAAG,EAAE,EAAE,CAAC;QAC9CD,QAAQ,IAAIF,SAAS,CAACG,GAAG,CAAC;MAC5B;;MAEA;MACA;MACA;MACA;;MAEA,OAAO;QAAE,GAAGJ,aAAa;QAAEX,MAAM,EAAEY;MAAU,CAAC,CAAC,CAAC;IAClD,CAAC,CAAC;EACJ;;EAEA;EACAK,SAAS,CAAC,MAAM;IACd,IAAIb,KAAK,GAAG,CAAC,EAAE;MAAE;MACf,MAAMc,UAAU,GAAGhB,KAAK,GAAGE,KAAK;MAChCe,MAAM,CAACZ,UAAU,CAACW,UAAU,CAAC,CAAC,CAAC;IACjC;EACF,CAAC,EAAE,CAAChB,KAAK,EAAEE,KAAK,CAAC,CAAC,CAAC,CAAC;;EAMpB,oBACEP,OAAA;IAAKuB,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBxB,OAAA;MAAKuB,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/BxB,OAAA;QAAQyB,OAAO,EAAEA,CAAA,KAAMd,aAAa,CAAC,GAAG,CAAE;QAAAa,QAAA,EAAC;MAAG;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACvD7B,OAAA;QAAQyB,OAAO,EAAEA,CAAA,KAAMd,aAAa,CAAC,GAAG,CAAE;QAAAa,QAAA,EAAC;MAAG;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACvD7B,OAAA;QAAQyB,OAAO,EAAEA,CAAA,KAAMd,aAAa,CAAC,GAAG,CAAE;QAAAa,QAAA,EAAC;MAAG;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACvD7B,OAAA;QAAQyB,OAAO,EAAEA,CAAA,KAAMd,aAAa,CAAC,GAAG,CAAE;QAAAa,QAAA,EAAC;MAAG;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpD,CAAC,eACN7B,OAAA;MAAKuB,SAAS,EAAC,OAAO;MAAAC,QAAA,gBAEpBxB,OAAA;QAAAwB,QAAA,GAAG,MAAI,EAACrB,MAAM,CAAC,GAAG,CAAC;MAAA;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxB7B,OAAA;QAAAwB,QAAA,GAAG,MAAI,EAACrB,MAAM,CAAC,GAAG,CAAC;MAAA;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxB7B,OAAA;QAAAwB,QAAA,GAAG,MAAI,EAACrB,MAAM,CAAC,GAAG,CAAC;MAAA;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxB7B,OAAA;QAAAwB,QAAA,GAAG,MAAI,EAACrB,MAAM,CAAC,GAAG,CAAC;MAAA;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxB7B,OAAA;QAAAwB,QAAA,GAAG,YAAU,EAACf,OAAO,CAACqB,OAAO,CAAC,CAAC,CAAC;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC3B,EAAA,CAhEQD,GAAG;AAAA8B,EAAA,GAAH9B,GAAG;AAkEZ,eAAeA,GAAG;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}