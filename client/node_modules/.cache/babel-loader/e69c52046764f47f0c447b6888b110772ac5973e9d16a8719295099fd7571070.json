{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Legend from './Legend';\nfunction Session() {\n  _s();\n  const [passes, setPasses] = useState({\n    \"3\": 0,\n    \"2\": 0,\n    \"1\": 0,\n    \"0\": 0\n  });\n  const [total, setTotal] = useState(0);\n  const [count, setCount] = useState(0);\n  const [average, setAverage] = useState(0);\n  const incrementPass = passKey => {\n    const numberKey = Number(passKey);\n    const newPasses = {\n      ...passes,\n      [numberKey]: passes[numberKey] + 1\n    };\n    const newCount = count + 1;\n    const newTotal = total + numberKey;\n    const newAverage = newTotal / newCount;\n    setPasses(newPasses);\n    setTotal(newTotal);\n    setCount(newCount);\n    setAverage(newAverage);\n  };\n  return {\n    passes,\n    total,\n    count,\n    average,\n    incrementPass\n  };\n\n  // const [passes, setPasses] = useState({\n  //     \"3\": 0,\n  //     \"2\": 0,\n  //     \"1\": 0,\n  //     \"0\": 0,\n  // })\n\n  // const [count, setCount] = useState(0)\n  // const [average, setAverage] = useState(0)\n  // const [show_legend, updateLegend] = useState(false);\n\n  // function incrementPass(passKey) {\n  //     setPasses((currentPasses) => {\n  //         const updatedPasses = {\n  //             ...currentPasses,\n  //             [passKey]: currentPasses[passKey] + 1,\n  //         };\n  //         let total = 0;\n  //         let new_count = 0;\n  //         for (const key in updatedPasses) {\n  //             total += updatedPasses[key] * parseInt(key, 10);\n  //             new_count += updatedPasses[key];\n  //         }\n  //         setAverage(total / new_count);\n  //         setCount(new_count)\n  //         return updatedPasses;\n  //     });\n  // }\n}\n_s(Session, \"O0Ni8aAtvvDWcOL++P45ILPvk9g=\");\n_c = Session;\nexport default Session;\nvar _c;\n$RefreshReg$(_c, \"Session\");","map":{"version":3,"names":["React","useState","Legend","Session","_s","passes","setPasses","total","setTotal","count","setCount","average","setAverage","incrementPass","passKey","numberKey","Number","newPasses","newCount","newTotal","newAverage","_c","$RefreshReg$"],"sources":["/Users/martykimball/react/serveandpass/src/Session.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Legend from './Legend';\n\nfunction Session() {\n    const [passes, setPasses] = useState({ \"3\": 0, \"2\": 0, \"1\": 0, \"0\": 0 });\n    const [total, setTotal] = useState(0);\n    const [count, setCount] = useState(0);\n    const [average, setAverage] = useState(0);\n  \n    const incrementPass = (passKey) => {\n      const numberKey = Number(passKey);\n      const newPasses = { ...passes, [numberKey]: passes[numberKey] + 1 };\n      const newCount = count + 1;\n      const newTotal = total + numberKey;\n      const newAverage = newTotal / newCount;\n  \n      setPasses(newPasses);\n      setTotal(newTotal);\n      setCount(newCount);\n      setAverage(newAverage);\n    };\n  \n    return { passes, total, count, average, incrementPass };\n\n    // const [passes, setPasses] = useState({\n    //     \"3\": 0,\n    //     \"2\": 0,\n    //     \"1\": 0,\n    //     \"0\": 0,\n    // })\n\n    // const [count, setCount] = useState(0)\n    // const [average, setAverage] = useState(0)\n    // const [show_legend, updateLegend] = useState(false);\n\n    // function incrementPass(passKey) {\n    //     setPasses((currentPasses) => {\n    //         const updatedPasses = {\n    //             ...currentPasses,\n    //             [passKey]: currentPasses[passKey] + 1,\n    //         };\n    //         let total = 0;\n    //         let new_count = 0;\n    //         for (const key in updatedPasses) {\n    //             total += updatedPasses[key] * parseInt(key, 10);\n    //             new_count += updatedPasses[key];\n    //         }\n    //         setAverage(total / new_count);\n    //         setCount(new_count)\n    //         return updatedPasses;\n    //     });\n    // }\n}\nexport default Session;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,UAAU;AAE7B,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGL,QAAQ,CAAC;IAAE,GAAG,EAAE,CAAC;IAAE,GAAG,EAAE,CAAC;IAAE,GAAG,EAAE,CAAC;IAAE,GAAG,EAAE;EAAE,CAAC,CAAC;EACxE,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EAEzC,MAAMY,aAAa,GAAIC,OAAO,IAAK;IACjC,MAAMC,SAAS,GAAGC,MAAM,CAACF,OAAO,CAAC;IACjC,MAAMG,SAAS,GAAG;MAAE,GAAGZ,MAAM;MAAE,CAACU,SAAS,GAAGV,MAAM,CAACU,SAAS,CAAC,GAAG;IAAE,CAAC;IACnE,MAAMG,QAAQ,GAAGT,KAAK,GAAG,CAAC;IAC1B,MAAMU,QAAQ,GAAGZ,KAAK,GAAGQ,SAAS;IAClC,MAAMK,UAAU,GAAGD,QAAQ,GAAGD,QAAQ;IAEtCZ,SAAS,CAACW,SAAS,CAAC;IACpBT,QAAQ,CAACW,QAAQ,CAAC;IAClBT,QAAQ,CAACQ,QAAQ,CAAC;IAClBN,UAAU,CAACQ,UAAU,CAAC;EACxB,CAAC;EAED,OAAO;IAAEf,MAAM;IAAEE,KAAK;IAAEE,KAAK;IAAEE,OAAO;IAAEE;EAAc,CAAC;;EAEvD;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACJ;AAACT,EAAA,CAjDQD,OAAO;AAAAkB,EAAA,GAAPlB,OAAO;AAkDhB,eAAeA,OAAO;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}