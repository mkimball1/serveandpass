{"ast":null,"code":"var _jsxFileName = \"/Users/martykimball/react/serveandpass/src/Graph.js\";\n// Import the Line element from the react-chartjs-2 package, which is a React wrapper for Chart.js\nimport { Line } from 'chart.js/auto';\nimport 'chart.js/auto'; // This will auto-register the chart type\n\n// The component that renders the line chart\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Graph() {\n  // Data for the chart\n  const data = {\n    labels: ['January', 'February', 'March', 'April', 'May', 'June'],\n    datasets: [{\n      label: 'My First dataset',\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: 'rgba(75,192,192,0.4)',\n      borderColor: 'rgba(75,192,192,1)',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'rgba(75,192,192,1)',\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: [65, 59, 80, 81, 56, 55, 40]\n    }]\n  };\n\n  // Options for the chart\n  const options = {\n    maintainAspectRatio: false,\n    // Don't maintain aspect ratio to fit into the div easily\n    scales: {\n      y: {\n        // Define the y-axis to start at 0\n        beginAtZero: true\n      }\n    }\n  };\n\n  // Return the Line element with the data and options as props\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '300px',\n      width: '500px'\n    },\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: data,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 12\n  }, this);\n}\n_c = Graph;\nexport default Graph;\n\n// import React, { useRef, useEffect } from 'react';\n// import Bar from 'chart.js/auto';\n\n// function Graph(data) {\n//     const options = {\n//                 scales: {\n//                     y: {\n//                         min: 0,\n//                         max: 3, // Assuming the max rating is 3\n//                     }\n//                 },\n//                 responsive: true,\n//                 maintainAspectRatio: false,\n//             };\n//     return (\n//         <Bar data={data} options={options}/>\n//     );\n// }\n// export default Graph;\n\n// function LineChart({ sessionsList }) {\n//     // key = date, value = passing that day\n//     let my_data = {};\n//     for (const session of sessionsList) {\n//         if (!my_data.hasOwnProperty(session.date)) {\n//             my_data[session.date] = {\n//                 \"total\": Math.round(session.count * session.average),\n//                 \"count\": session.count\n//             };\n//         } else {\n//             my_data[session.date]['total'] += Math.round(session.count * session.average);\n//             my_data[session.date]['count'] += session.count;\n//         }\n//     }\n\n//     let values = Object.values(my_data).map(day => day.total / day.count);\n\n//     const data = {\n//         labels: Object.keys(my_data),\n//         datasets: [\n//             {\n//                 label: 'Serve Receive Rating',\n//                 data: values,\n//                 fill: true,\n//                 borderColor: 'rgb(75, 192, 192)',\n//                 tension: 0.1\n//             }\n//         ]\n//     };\n\n//     const options = {\n//         scales: {\n//             y: {\n//                 min: 0,\n//                 max: 3, // Assuming the max rating is 3\n//             }\n//         },\n//         responsive: true,\n//         maintainAspectRatio: false,\n//     };\n\n//     const canvasRef = useRef(null);\n\n//     useEffect(() => {\n//         const ctx = canvasRef.current.getContext('2d');\n//         const lineChart = new Chart(ctx, {\n//             type: 'line',\n//             data: data,\n//             options: options,\n//         });\n\n//         return () => lineChart.destroy(); // Clean-up function to destroy chart instance\n//     }, [data, options]); // Corrected the dependency array\n\n//     return (\n//         <div style={{ position: 'relative', height: '40vh', width: '80vw' }}>\n//             <canvas ref={canvasRef} />\n//         </div>\n//     );\n// }\n\n// export default LineChart;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["Line","jsxDEV","_jsxDEV","Graph","data","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","options","maintainAspectRatio","scales","y","beginAtZero","style","height","width","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/martykimball/react/serveandpass/src/Graph.js"],"sourcesContent":["// Import the Line element from the react-chartjs-2 package, which is a React wrapper for Chart.js\nimport {Line} from 'chart.js/auto';\nimport 'chart.js/auto'; // This will auto-register the chart type\n\n// The component that renders the line chart\nfunction Graph() {\n    // Data for the chart\n    const data = {\n        labels: ['January', 'February', 'March', 'April', 'May', 'June'],\n        datasets: [\n            {\n                label: 'My First dataset',\n                fill: false,\n                lineTension: 0.1,\n                backgroundColor: 'rgba(75,192,192,0.4)',\n                borderColor: 'rgba(75,192,192,1)',\n                borderCapStyle: 'butt',\n                borderDash: [],\n                borderDashOffset: 0.0,\n                borderJoinStyle: 'miter',\n                pointBorderColor: 'rgba(75,192,192,1)',\n                pointBackgroundColor: '#fff',\n                pointBorderWidth: 1,\n                pointHoverRadius: 5,\n                pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                pointHoverBorderColor: 'rgba(220,220,220,1)',\n                pointHoverBorderWidth: 2,\n                pointRadius: 1,\n                pointHitRadius: 10,\n                data: [65, 59, 80, 81, 56, 55, 40],\n            },\n        ],\n    };\n\n    // Options for the chart\n    const options = {\n        maintainAspectRatio: false, // Don't maintain aspect ratio to fit into the div easily\n        scales: {\n            y: { // Define the y-axis to start at 0\n                beginAtZero: true,\n            },\n        },\n    };\n\n    // Return the Line element with the data and options as props\n    return <div style={{ height: '300px', width: '500px' }}>\n        <Line data={data} options={options} />\n    </div>;\n}\n\nexport default Graph;\n\n// import React, { useRef, useEffect } from 'react';\n// import Bar from 'chart.js/auto';\n\n// function Graph(data) {\n//     const options = {\n//                 scales: {\n//                     y: {\n//                         min: 0,\n//                         max: 3, // Assuming the max rating is 3\n//                     }\n//                 },\n//                 responsive: true,\n//                 maintainAspectRatio: false,\n//             };\n//     return (\n//         <Bar data={data} options={options}/>\n//     );\n// }\n// export default Graph;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// function LineChart({ sessionsList }) {\n//     // key = date, value = passing that day\n//     let my_data = {};\n//     for (const session of sessionsList) {\n//         if (!my_data.hasOwnProperty(session.date)) {\n//             my_data[session.date] = {\n//                 \"total\": Math.round(session.count * session.average),\n//                 \"count\": session.count\n//             };\n//         } else {\n//             my_data[session.date]['total'] += Math.round(session.count * session.average);\n//             my_data[session.date]['count'] += session.count;\n//         }\n//     }\n\n//     let values = Object.values(my_data).map(day => day.total / day.count);\n\n//     const data = {\n//         labels: Object.keys(my_data),\n//         datasets: [\n//             {\n//                 label: 'Serve Receive Rating',\n//                 data: values,\n//                 fill: true,\n//                 borderColor: 'rgb(75, 192, 192)',\n//                 tension: 0.1\n//             }\n//         ]\n//     };\n\n//     const options = {\n//         scales: {\n//             y: {\n//                 min: 0,\n//                 max: 3, // Assuming the max rating is 3\n//             }\n//         },\n//         responsive: true,\n//         maintainAspectRatio: false,\n//     };\n\n//     const canvasRef = useRef(null);\n\n//     useEffect(() => {\n//         const ctx = canvasRef.current.getContext('2d');\n//         const lineChart = new Chart(ctx, {\n//             type: 'line',\n//             data: data,\n//             options: options,\n//         });\n\n//         return () => lineChart.destroy(); // Clean-up function to destroy chart instance\n//     }, [data, options]); // Corrected the dependency array\n\n//     return (\n//         <div style={{ position: 'relative', height: '40vh', width: '80vw' }}>\n//             <canvas ref={canvasRef} />\n//         </div>\n//     );\n// }\n\n// export default LineChart;\n"],"mappings":";AAAA;AACA,SAAQA,IAAI,QAAO,eAAe;AAClC,OAAO,eAAe,CAAC,CAAC;;AAExB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,KAAKA,CAAA,EAAG;EACb;EACA,MAAMC,IAAI,GAAG;IACTC,MAAM,EAAE,CAAC,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC;IAChEC,QAAQ,EAAE,CACN;MACIC,KAAK,EAAE,kBAAkB;MACzBC,IAAI,EAAE,KAAK;MACXC,WAAW,EAAE,GAAG;MAChBC,eAAe,EAAE,sBAAsB;MACvCC,WAAW,EAAE,oBAAoB;MACjCC,cAAc,EAAE,MAAM;MACtBC,UAAU,EAAE,EAAE;MACdC,gBAAgB,EAAE,GAAG;MACrBC,eAAe,EAAE,OAAO;MACxBC,gBAAgB,EAAE,oBAAoB;MACtCC,oBAAoB,EAAE,MAAM;MAC5BC,gBAAgB,EAAE,CAAC;MACnBC,gBAAgB,EAAE,CAAC;MACnBC,yBAAyB,EAAE,oBAAoB;MAC/CC,qBAAqB,EAAE,qBAAqB;MAC5CC,qBAAqB,EAAE,CAAC;MACxBC,WAAW,EAAE,CAAC;MACdC,cAAc,EAAE,EAAE;MAClBpB,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;IACrC,CAAC;EAET,CAAC;;EAED;EACA,MAAMqB,OAAO,GAAG;IACZC,mBAAmB,EAAE,KAAK;IAAE;IAC5BC,MAAM,EAAE;MACJC,CAAC,EAAE;QAAE;QACDC,WAAW,EAAE;MACjB;IACJ;EACJ,CAAC;;EAED;EACA,oBAAO3B,OAAA;IAAK4B,KAAK,EAAE;MAAEC,MAAM,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAQ,CAAE;IAAAC,QAAA,eACnD/B,OAAA,CAACF,IAAI;MAACI,IAAI,EAAEA,IAAK;MAACqB,OAAO,EAAEA;IAAQ;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AACV;AAACC,EAAA,GA3CQnC,KAAK;AA6Cd,eAAeA,KAAK;;AAEpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}