{"ast":null,"code":"var _jsxFileName = \"/Users/martykimball/react/serveandpass/src/Graph.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport Session from './Session';\nimport React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LineChart({\n  data,\n  options\n}) {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    if (canvasRef.current) {\n      const ctx = canvasRef.current.getContext('2d');\n\n      // Instantiate a new chart using 'new Chart()'\n      const lineChart = new Chart(ctx, {\n        type: 'line',\n        data: data,\n        options: options || {} // Use default options if 'options' prop is not provided\n      });\n\n      // Clean-up function to destroy chart instance on component unmount\n      return () => {\n        lineChart.destroy();\n      };\n    }\n  }, [data, options]); // Re-run effect if 'data' or 'options' props change\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_s(LineChart, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = LineChart;\nexport default LineChart;\nvar _c;\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"names":["useState","Session","React","useRef","useEffect","Chart","jsxDEV","_jsxDEV","LineChart","data","options","_s","canvasRef","current","ctx","getContext","lineChart","type","destroy","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/martykimball/react/serveandpass/src/Graph.js"],"sourcesContent":["import { useState } from 'react';\nimport Session from './Session';\n\nimport React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js/auto';\n\nfunction LineChart({ data, options }) {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    if (canvasRef.current) {\n      const ctx = canvasRef.current.getContext('2d');\n\n      // Instantiate a new chart using 'new Chart()'\n      const lineChart = new Chart(ctx, {\n        type: 'line',\n        data: data,\n        options: options || {}, // Use default options if 'options' prop is not provided\n      });\n\n      // Clean-up function to destroy chart instance on component unmount\n      return () => {\n        lineChart.destroy();\n      };\n    }\n  }, [data, options]); // Re-run effect if 'data' or 'options' props change\n\n  return (\n    <canvas ref={canvasRef}></canvas>\n  );\n}\n\nexport default LineChart;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,OAAO,MAAM,WAAW;AAE/B,OAAOC,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,OAAOC,KAAK,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,SAASA,CAAC;EAAEC,IAAI;EAAEC;AAAQ,CAAC,EAAE;EAAAC,EAAA;EACpC,MAAMC,SAAS,GAAGT,MAAM,CAAC,IAAI,CAAC;EAE9BC,SAAS,CAAC,MAAM;IACd,IAAIQ,SAAS,CAACC,OAAO,EAAE;MACrB,MAAMC,GAAG,GAAGF,SAAS,CAACC,OAAO,CAACE,UAAU,CAAC,IAAI,CAAC;;MAE9C;MACA,MAAMC,SAAS,GAAG,IAAIX,KAAK,CAACS,GAAG,EAAE;QAC/BG,IAAI,EAAE,MAAM;QACZR,IAAI,EAAEA,IAAI;QACVC,OAAO,EAAEA,OAAO,IAAI,CAAC,CAAC,CAAE;MAC1B,CAAC,CAAC;;MAEF;MACA,OAAO,MAAM;QACXM,SAAS,CAACE,OAAO,CAAC,CAAC;MACrB,CAAC;IACH;EACF,CAAC,EAAE,CAACT,IAAI,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC;;EAErB,oBACEH,OAAA;IAAQY,GAAG,EAAEP;EAAU;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAS,CAAC;AAErC;AAACZ,EAAA,CAxBQH,SAAS;AAAAgB,EAAA,GAAThB,SAAS;AA0BlB,eAAeA,SAAS;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}